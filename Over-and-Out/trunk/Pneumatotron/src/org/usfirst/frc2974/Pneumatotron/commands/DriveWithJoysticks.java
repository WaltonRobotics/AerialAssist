// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2974.Pneumatotron.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2974.Pneumatotron.Robot;

/**
 * DriveWithJoysticks is currently employing Cheesy Poof Drive
 */
public class DriveWithJoysticks extends Command {

	double right = 0;
	double left = 0;
	double throttle = 0;
	double turn = 0;
	double forward = 0;

	public DriveWithJoysticks() {
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrain);
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}
	// Called just before this Command runs the first time

	protected void initialize() {
		right = left = throttle = turn = forward = 0;
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		throttle = getThrottle();
		turn = getCorrectTurnValue();
		forward = getForward();
		right = (forward - turn) * throttle;
		left = (forward + turn) * throttle;

		Robot.driveTrain.driveManual(right, left);
		if (Robot.oi.bShiftUp.get()) {
			Robot.driveTrain.shiftToHigh(true);
		} else if (Robot.oi.bShiftDown.get()) {
			Robot.driveTrain.shiftToHigh(false);
		}
	}

	private double getThrottle() {
		return (1 - Robot.oi.jLeft.getY()) / 2;
	}

	private double getCorrectTurnValue() {
		double x = Robot.oi.jRight.getX();
		if (x < .15 && x > -.15) {
			x = 0;
		}
		return x;
	}

	private double getForward() {
		return -Robot.oi.jRight.getY();
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return Robot.oi.ds.isAutonomous();
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
//******************************************************************************
//    protected void initialize() {
//        Robot.drivetrain.enableControl();
//        SmartDashboard.putNumber("P: ", 0.001);
//        SmartDashboard.putNumber("I: ", 0.000);
//        SmartDashboard.putNumber("D: ", 0.000);
//        SmartDashboard.putBoolean("Drive Straight", false);
//        SmartDashboard.putBoolean("Drive With PIDs", false);
//    }
//    // Called repeatedly when this Command is scheduled to run
//
//    protected void execute() {                              //Mess with PID coefficients
//        double p = SmartDashboard.getNumber("P: ", 0.001);
//        double i = SmartDashboard.getNumber("I: ", 0.000);
//        double d = SmartDashboard.getNumber("D: ", 0.001);
//        RobotMap.controllerRight.setPID(p, i, d);
//        RobotMap.controllerLeft.setPID(p, i, d);
//
//        throttle = 600 * (1 - Robot.oi.left.getY()) / 2;            //throttle such that joystick is ranged 0<.5<1 times Setpoint multiplier
//        if (!SmartDashboard.getBoolean("Drive Straight")) {
//            right = (Robot.oi.right.getY() - Robot.oi.right.getX()) * throttle;     //arcade drive
//            left = (Robot.oi.right.getY() + Robot.oi.right.getX()) * throttle;
//        } else {
//            left = right = Robot.oi.right.getY();           //right and left are equal and only use right Y axis
//        }
//        Robot.drivetrain.drive(right, left);//duh
//    }
//
//Mess with PID coefficients
//        double p = SmartDashboard.getNumber("P: ", 0.001);
//        double i = SmartDashboard.getNumber("I: ", 0.000);
//        double d = SmartDashboard.getNumber("D: ", 0.001);
//        RobotMap.controllerRight.setPID(p, i, d);
//        RobotMap.controllerLeft.setPID(p, i, d);
// throttle = 600 * (1 - Robot.oi.jLeft.getY()) / 2;            //throttle such that joystick is ranged 0<.5<1 times Setpoint multiplier
//        if (SmartDashboard.getBoolean("Drive With PIDs")) {
//            if (!SmartDashboard.getBoolean("Drive Straight")) {
//                right = (Robot.oi.jRight.getY() - Robot.oi.jRight.getX()) * throttle;     //arcade drive
//                left = (Robot.oi.jRight.getY() + Robot.oi.jRight.getX()) * throttle;
//            } else {
//                left = right = Robot.oi.jRight.getY();           //right and jLeft are equal and only use jRight Y axis
//            }
//            Robot.drivetrain.drive(right, left);//duh
//        } else {
//}