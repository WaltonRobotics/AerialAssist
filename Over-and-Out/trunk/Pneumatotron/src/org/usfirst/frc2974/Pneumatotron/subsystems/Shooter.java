// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2974.Pneumatotron.subsystems;

import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2974.Pneumatotron.RobotMap;
import org.usfirst.frc2974.Pneumatotron.commands.Fire;

/**
 *
 */
public class Shooter extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	Solenoid release = RobotMap.shooterRelease;
	Solenoid shaftA = RobotMap.shooterShaftA;
	Solenoid shaftB = RobotMap.shooterShaftB;
	Compressor compressor = RobotMap.compressor;
	AnalogChannel pressure = RobotMap.pressure;
	private boolean isCharged, isLatched;
	private boolean isHighFavoring = false;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		setDefaultCommand(new Fire());
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		//setDefaultCommand(new MySpecialCommand());
	}

	/**
	 * Charge method switches the main two pistons on so that the catapult builds potential energy This method should
	 * always be called before the release() method
	 */
	public void charge() {
		shaftA.set(true);
		shaftB.set(true);
		isCharged = true;
	}

	/**
	 * Relax method sets all the pistons to their default state which allows for the ball to be placed in the catapult
	 */
	public void discharge() {
		shaftA.set(false);
		shaftB.set(false);
		isCharged = false;
	}

	/**
	 * setLatch method sets latch before charge is called
	 */
	public void setLatch() {
		release.set(false);
		isLatched = true;
	}

	/**
	 * Release method releases the latch on the catapult and allows the mechanism to fire
	 */
	public void releaseLatch() {
		release.set(true);
		isLatched = false;
	}

	public boolean isCharged() {
		return isCharged;
	}

	public boolean isLatched() {
		return isLatched;
	}

	public int getPressure() {
		return (int) (((pressure.getVoltage() - .5) / 4) * 150);
	}

	public boolean goodToShoot() {
		if (getPressure() > 80) { //90
			isHighFavoring = true;
			return true;
		} else if (getPressure() < 70) { //80
			isHighFavoring = false;
			return false;
		} else {
			return isHighFavoring;
		}
	}

	public void jog() {
		//shaftA.set(true);
	}

	public void unjog() {
		//shaftA.set(false);
	}
}
